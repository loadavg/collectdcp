<?xml version="1.0" encoding="UTF-8"?>

<interface>
  <requires lib="gtk+" version="3.8"/>
  <object class="GtkLabel" id="label_dbi">
    <property name="visible">True</property>
    <property name="can_focus">False</property>
    <property name="label">Plugin dbi


This plugin uses the dbi library (http://libdbi.sourceforge.net/) to
connect to various databases, execute SQL statements and read back the
results. dbi is an acronym for "database interface" in case you were
wondering about the name. You can configure how each column is to be
interpreted and the plugin will generate one or more data sets from each row
returned according to these rules.


Because the plugin is very generic, the configuration is a little more complex
than those of other plugins. It usually looks something like this:



  &lt;Plugin dbi&gt;
    &lt;Query "out_of_stock"&gt;
      Statement "SELECT category, COUNT(*) AS value FROM products WHERE in_stock = 0 GROUP BY category"
      # Use with MySQL 5.0.0 or later
      MinVersion 50000
      &lt;Result&gt;
        Type "gauge"
        InstancePrefix "out_of_stock"
        InstancesFrom "category"
        ValuesFrom "value"
      &lt;/Result&gt;
    &lt;/Query&gt;
    &lt;Database "product_information"&gt;
      Driver "mysql"
      DriverOption "host" "localhost"
      DriverOption "username" "collectd"
      DriverOption "password" "aZo6daiw"
      DriverOption "dbname" "prod_info"
      SelectDB "prod_info"
      Query "out_of_stock"
    &lt;/Database&gt;
  &lt;/Plugin&gt;


The configuration above defines one query with one result and one database. The
query is then linked to the database with the Query option within the
&lt;Database&gt; block. You can have any number of queries and databases
and you can also use the Include statement to split up the configuration
file in multiple, smaller files. However, the &lt;Query&gt; block must
precede the &lt;Database&gt; blocks, because the file is interpreted from
top to bottom!


The following is a complete list of options:






Query blocks


Query blocks define SQL statements and how the returned data should be
interpreted. They are identified by the name that is given in the opening line
of the block. Thus the name needs to be unique. Other than that, the name is
not used in collectd.


In each Query block, there is one or more Result blocks. Result blocks
define which column holds which value or instance information. You can use
multiple Result blocks to create multiple values from one returned row. This
is especially useful, when queries take a long time and sending almost the same
query again and again is not desirable.


Example:



  &lt;Query "environment"&gt;
    Statement "select station, temperature, humidity from environment"
    &lt;Result&gt;
      Type "temperature"
      # InstancePrefix "foo"
      InstancesFrom "station"
      ValuesFrom "temperature"
    &lt;/Result&gt;
    &lt;Result&gt;
      Type "humidity"
      InstancesFrom "station"
      ValuesFrom "humidity"
    &lt;/Result&gt;
  &lt;/Query&gt;


The following options are accepted:

</property>
  </object>
  <object class="GtkGrid" id="dbi">
    <property name="visible">True</property>
    <property name="can_focus">False</property>
    <child>
      <object class="GtkLabel" id="label-Statement">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">Statement</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">0</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="Statement">
	<property name="name">Statement</property>
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_text" translatable="yes">
Sets the statement that should be executed on the server. This is not
interpreted by collectd, but simply passed to the database server. Therefore,
the SQL dialect that's used depends on the server collectd is connected to.
The query has to return at least two columns, one for the instance and one
value. You cannot omit the instance, even if the statement is guaranteed to
always return exactly one line. In that case, you can usually specify something
like this:

  Statement "SELECT \"instance\", COUNT(*) AS value FROM table"
(That works with MySQL but may not be valid SQL according to the spec. If you
use a more strict database server, you may have to select from a dummy table or
something.)
Please note that some databases, for example Oracle, will fail if you
include a semicolon at the end of the statement.
</property>
	<property name="placeholder_text" translatable="yes">SQL</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">0</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-MinVersion">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">MinVersion</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">1</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="MinVersion">
	<property name="name">MinVersion</property>
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_text" translatable="yes">no description available for MinVersion</property>
	<property name="placeholder_text" translatable="yes">Version</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">1</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-MaxVersion">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">MaxVersion</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">2</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="MaxVersion">
	<property name="name">MaxVersion</property>
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_text" translatable="yes">
Only use this query for the specified database version. You can use these
options to provide multiple queries with the same name but with a slightly
different syntax. The plugin will use only those queries, where the specified
minimum and maximum versions fit the version of the database in use.
The database version is determined by dbi_conn_get_engine_version, see the
libdbi documentation
for details. Basically, each part of the version is assumed to be in the range
from 00 to 99 and all dots are removed. So version "4.1.2" becomes
"40102", version "5.0.42" becomes "50042".
Warning: The plugin will use all matching queries, so if you specify
multiple queries with the same name and overlapping ranges, weird stuff will
happen. Don't to it! A valid example would be something along these lines:

  MinVersion 40000
  MaxVersion 49999
  ...
  MinVersion 50000
  MaxVersion 50099
  ...
  MinVersion 50100
  # No maximum
In the above example, there are three ranges that don't overlap. The last one
goes from version "5.1.0" to infinity, meaning "all later versions". Versions
before "4.0.0" are not specified.
</property>
	<property name="placeholder_text" translatable="yes">Value</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">2</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-Type">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">Type</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">3</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="Type">
	<property name="name">Type</property>
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_text" translatable="yes">
The type that's used for each line returned. See types.db(5) for more
details on how types are defined. In short: A type is a predefined layout of
data and the number of values and type of values has to match the type
definition.
If you specify "temperature" here, you need exactly one gauge column. If you
specify "if_octets", you will need two counter columns. See the ValuesFrom
setting below.
There must be exactly one Type option inside each Result block.
</property>
	<property name="placeholder_text" translatable="yes">Type</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">3</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-InstancePrefix">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">InstancePrefix</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">4</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="InstancePrefix">
	<property name="name">InstancePrefix</property>
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_text" translatable="yes">
Prepends prefix to the type instance. If InstancesFrom (see below) is not
given, the string is simply copied. If InstancesFrom is given, prefix and
all strings returned in the appropriate columns are concatenated together,
separated by dashes ("-").
</property>
	<property name="placeholder_text" translatable="yes">prefix</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">4</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-InstancesFrom">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">InstancesFrom</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">5</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkComboBoxText" id="InstancesFrom">
	<property name="name">InstancesFrom</property>
	<items>
	  <item translatable="no">column0</item>
	  <item translatable="no">column1</item>
	</items>
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="tooltip_text" translatable="yes">
Specifies the columns whose values will be used to create the "type-instance"
for each row. If you specify more than one column, the value of all columns
will be joined together with dashes ("-") as separation characters.
The plugin itself does not check whether or not all built instances are
different. It's your responsibility to assure that each is unique. This is
especially true, if you do not specify InstancesFrom: You have to make
sure that only one row is returned in this case.
If neither InstancePrefix nor InstancesFrom is given, the type-instance
will be empty.
</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">5</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-ValuesFrom">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">ValuesFrom</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">6</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkComboBoxText" id="ValuesFrom">
	<property name="name">ValuesFrom</property>
	<items>
	  <item translatable="no">column0</item>
	  <item translatable="no">column1</item>
	</items>
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="tooltip_text" translatable="yes">
Names the columns whose content is used as the actual data for the data sets
that are dispatched to the daemon. How many such columns you need is determined
by the Type setting above. If you specify too many or not enough columns,
the plugin will complain about that and no data will be submitted to the
daemon.
The actual data type in the columns is not that important. The plugin will
automatically cast the values to the right type if it know how to do that. So
it should be able to handle integer an floating point types, as well as strings
(if they include a number at the beginning).
There must be at least one ValuesFrom option inside each Result block.
</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">6</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-MetadataFrom">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">MetadataFrom</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">7</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkComboBoxText" id="MetadataFrom">
	<property name="name">MetadataFrom</property>
	<items>
	  <item translatable="no">column0</item>
	  <item translatable="no">column1</item>
	</items>
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="tooltip_text" translatable="yes">
Names the columns whose content is used as metadata for the data sets
that are dispatched to the daemon.
The actual data type in the columns is not that important. The plugin will
automatically cast the values to the right type if it know how to do that. So
it should be able to handle integer an floating point types, as well as strings
(if they include a number at the beginning).
</property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">7</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
  </object>
</interface>