<?xml version="1.0" encoding="UTF-8"?>

<interface>
  <requires lib="gtk+" version="3.8"/>
  <object class="GtkLabel" id="table">
    <property name="visible">True</property>
    <property name="can_focus">False</property>
    <property name="label">Plugin table


The table plugin provides generic means to parse tabular data and dispatch
user specified values. Values are selected based on column numbers. For
example, this plugin may be used to get values from the Linux proc(5)
filesystem or CSV (comma separated values) files.



  &lt;Plugin table&gt;
    &lt;Table "/proc/slabinfo"&gt;
      Instance "slabinfo"
      Separator " "
      &lt;Result&gt;
        Type gauge
        InstancePrefix "active_objs"
        InstancesFrom 0
        ValuesFrom 1
      &lt;/Result&gt;
      &lt;Result&gt;
        Type gauge
        InstancePrefix "objperslab"
        InstancesFrom 0
        ValuesFrom 4
      &lt;/Result&gt;
    &lt;/Table&gt;
  &lt;/Plugin&gt;


The configuration consists of one or more Table blocks, each of which
configures one file to parse. Within each Table block, there are one or
more Result blocks, which configure which data to select and how to
interpret it.


The following options are available inside a Table block:

</property>
    <property name="use_markup">True</property>
  </object>
  <object class="GtkGrid" id="table">
    <property name="visible">True</property>
    <property name="can_focus">False</property>
    <child>
      <object class="GtkLabel" id="label-Instance">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">Instance</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">0</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="Instance">
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_markup" translatable="yes">
If specified, instance is used as the plugin instance. So, in the above
example, the plugin name table-slabinfo would be used. If omitted, the
filename of the table is used instead, with all special characters replaced
with an underscore (_).
</property>
	<property name="placeholder_text" translatable="yes"></property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">0</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkLabel" id="label-Separator">
	<property name="visible">True</property>
	<property name="can_focus">False</property>
	<property name="label" translatable="yes">Separator</property>
      </object>
      <packing>
	<property name="left_attach">0</property>
	<property name="top_attach">1</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
    <child>
      <object class="GtkEntry" id="Separator">
	<property name="visible">True</property>
	<property name="can_focus">True</property>
	<property name="tooltip_markup" translatable="yes">
Any character of string is interpreted as a delimiter between the different
columns of the table. A sequence of two or more contiguous delimiters in the
table is considered to be a single delimiter, i.Â e. there cannot be any
empty columns. The plugin uses the strtok_r(3) function to parse the lines
of a table - see its documentation for more details. This option is mandatory.
A horizontal tab, newline and carriage return may be specified by \\t,
\\n and \\r respectively. Please note that the double backslashes are
required because of collectd's config parsing.
</property>
	<property name="placeholder_text" translatable="yes"></property>
      </object>
      <packing>
	<property name="left_attach">1</property>
	<property name="top_attach">1</property>
	<property name="width">1</property>
	<property name="height">1</property>
      </packing>
    </child>
  </object>
</interface>